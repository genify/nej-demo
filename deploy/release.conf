# 打包配置文件
# × 每行第一个非空字符为“#”则表示该行为注释
# × 配置参数使用 KEY = VALUE 格式
# × 配置参数为路径的，如果是相对路径则必须以“./”、“../”开始
# × 配置参数中如无特殊说明使用的相对路径均相对于DIR_WEBROOT的路径
# × 配置参数名称忽略大小写，即cfg_dir_webroot等价于CFG_DIR_WEBROOT

# 路径相关配置
# WEB根路径，必须配置，如果是相对路径则相对于当前配置文件路径(即.conf文件所在目录)
DIR_WEBROOT       = ../webapp/
# 项目HTML文件根路径，默认为DIR_WEBROOT配置信息
DIR_SOURCE        = ./src/html/
# 打包输出路径，默认为DIR_WEBROOT配置信息
DIR_OUTPUT        = ./pub/
# 静态文件输出目录，默认为DIR_OUTPUT配置信息
#DIR_OUTPUT_STATIC = ./s/
# 项目服务器端模板文件根路径
# 服务器端模板文件确保页面所需的CSS、JS文件的引用均出现在模板文件中
#DIR_SOURCE_TP     = ./template/
# 项目服务器端模板输出路径，默认为DIR_SOURCE_TP配置信息
#DIR_OUTPUT_TP     = ./tpl/
# 静态资源路径，默认为WEB根路径下的res目录
#DIR_STATIC        = ./res/

# NEJ框架本地路径，此配置优先级高于自动识别
# 如果项目文件既有使用NEJ依赖的页面也有使用nodep的页面时必须配置此参数
NEJ_DIR           = D:\workspace\git\NEJ\src
# NEJ平台适配参数，等价于define.js?p=wk|td这里p的配置
# 优先级比p参数高，配置规则同p
#NEJ_PLATFORM      = wk|td-1

# 优化图片输出
# 图片优化开关，打开此开关则DIR_STATIC下的图片会做优化压缩，替换原文件
#OPT_IMAGE_FLAG    = true
# 图片输出质量 1-100
#OPT_IMAGE_QUALITY = 100

# HTML5离线应用配置文件
# 输出配置文件
#MANIFEST_OUTPUT     = ./cache.manifest
# 配置文件模板，纯文本文件，不配置使用默认模板，
# 如果是相对路径则相对于当前配置文件路径(即.conf文件所在目录)，
# 模板中使用的变量格式为  #<VAR_NAME>，其中VAR_NAME为变量名，
# 可用变量名如下：
# VERSION       -   版本信息
# CACHE_LIST    -   缓存资源列表，换行符分隔
#MANIFEST_TEMPLATE   = ./cache.manifest.tpl
# 输出CACHE_LIST列表过滤器
#MANIFEST_FILTER     = \.html$

# 路径别名配置
# 页面引入的脚本或者样式可以使用服务器端模板标记，如
# <script src="${config_lib_root}define.js?pro=${pro_root}"></script>
# 别名开始标记
#ALIAS_START_TAG = ${
# 别名结束标记
#ALIAS_END_TAG = }
# 别名配置列表
#ALIAS_DICTIONARY = {"pro_root":"../js/","config_lib_root":"{lib}"}

# 文件输入输出配置
# 输出文件名后缀，配置了后缀的情况下对所有输出文件的请求都不会带版本号，默认带版本号
#NAME_SUFFIX    = v1
# 建议使用FILE_FILTER参数配置
# 输入文件后缀匹配规则，多个后缀用“|”分隔，忽略大小写，默认取所有文件
FILE_SUFFIXE   = html|ftl
# 输入文件通过路径过滤规则
# - 正则表达式，忽略大小写
# - 确保可以通过new RegExp转换成正则
# - 规则用来检验要处理的文件路径，默认处理所有文件
#FILE_FILTER = \\.(ftl|html)$
# 输入输出文件编码，默认为utf-8，注项目必须保证所有文件的编码一致，如css/js/ftl等文件的编码一致
#FILE_CHARSET   = gbk
# 静态资源是否自动带版本号
# 静态资源即DIR_STATIC配置的目录下的所有资源文件的引入均自动带上版本信息
#STATIC_VERSION = true
# 输出文件版本号使用随机算法
# - 默认输出文件版本号根据内容计算，如果文件内容不变版本不变
# - 此参数设置为true时每次打包生成的版本号都不一样，常用于线上服务器更新失败时强制变更版本信息
#RAND_VERSION   = true

# 静态资源域名配置
# × 如果没有配置，则项目的静态资源中相对路径的请求相对于页面路径
# × 如果配置了"/"，则项目的静态资源中相对路径的请求相对于WEBROOT的路径
# × 如果配置了域名，则项目的静态资源中相对路径的请求使用当前域名的绝对路径
# 默认静态资源请求域名，限定DIR_STATIC配置路径下资源、JS资源、CSS资源访问域
#DM_STATIC    = b1.bst.126.net
# 外联样式请求域名，没有配置则使用DM_STATIC配置信息
#DM_STATIC_CS = b1.bst.126.net
# 外联脚本请求域名，没有配置则使用DM_STATIC配置信息
#DM_STATIC_JS = b2.bst.126.net
# MANIFEST文件请求域名，没有配置则使用DM_STATIC配置信息
#DM_STATIC_MF = b3.bst.126.net
# 模块根路径配置，模块调度方案中模块文件所在的根路径，默认自动解析
#DM_STATIC_MR = /pub/

# 混淆压缩配置
# 脚本混淆等级
# 0 - 只混淆所有局部变量
# 1 - 在0的基础上增加单个下划线(_)前缀的变量，如_xxx
# 2 - 在1的基础上增加两个下划线(__)前缀的变量，如_xxx、__xxx
# 3 - 在0的基础上增加所有下滑线前缀的变量【默认配置】，如_xxx、__xxx、_$xxx、_$$xxx
#OBF_LEVEL      = 3
# 脚本混淆变量名称对照表文件路径，如果是相对路径则相对于当前配置文件路径
#OBF_NAME_BAGS  = ./names.json
# 是否采用兼容模式输出结果，默认为true
# 非兼容模式下只能使用依赖注入的形式获取依赖文件输出的对象
# 兼容模式下支持非兼容模式外还支持使用名字空间作为依赖对象获取方式
#OBF_COMPATIBLE = true
# 是否导出Source Map配置，
# 默认情况或者未配置的情况下不输出Source Map信息
#OBF_SOURCE_MAP = false
# 内联样式内容的最大长度（单位K），默认为50K，如超出该长度则将样式做为外联文件导入
#OBF_MAX_CS_INLINE_SIZE = 0
# 内联脚本内容的最大长度（单位K），默认为0K，即使用外联文件导入
OBF_MAX_JS_INLINE_SIZE = 100

# 文件合并策略配置
# × 以下配置路径如果是相对路径则相对于当前配置文件路径
# × 如果没有配置core文件列表则一个文件在2个以上（包含2个）文件中出现就会合并到core文件中
# javascript core 文件列表配置文件，配置列表会自动做依赖分析
# × 如果指定路径则表示配置文件地址，如./core.js.json
# × 如果指定列表则表示文件列表，必须在一行内完成，如["{lib}util/ajax/xdr.js",...]
#CORE_LIST_JS = ./core.js.json
# css core 文件列表配置文件
# × 如果指定路径则表示配置文件地址，如./core.css.json
# × 如果指定列表则表示文件列表，必须在一行内完成，如["/src/css/reset.css",...]
#CORE_LIST_CS = ./core.css.json
# javascript core 屏蔽文件配置，注意：
# × 该列表不会做依赖分析
# × 该列表配置的所有文件都不应该被其他文件依赖
# 在javascript的core文件解析完后，删除以下列表中出现的文件
# × 如果指定路径则表示配置文件地址，如./mask.js.json
# × 如果指定列表则表示文件列表，必须在一行内完成，如["{lib}util/ajax/xdr.js",...]
#CORE_MASK_JS = ./mask.js.json
# css core 文件排除配置，注意：
# × 屏蔽文件不应该与载入的顺序有关
# 在css的core文件解析完后，删除以下列表中出现的文件
# × 如果指定路径则表示配置文件地址，如./mask.css.json
# × 如果指定列表则表示文件列表，必须在一行内完成，如["/src/css/reset.css",...]
#CORE_MASK_CS = ./mask.css.json

# 扩展配置
# 输出文件不做压缩，默认根据页面标记处理，此优先级高于页面标记@NOCOMPRESS
#X_NOCOMPRESS   = true
# 输出文件中不做解析的内容设置，默认根据页面标记处理，此优先级高于页面配置标记@NOPARSE
# 0 - 根据页面标记处理
# 1 - 不处理内联样式，如<style></style>之间的内容
# 2 - 不处理内联脚本，如<script></script>之间的内容
# 3 - 不处理内联样式和脚本，即1和2的情况都不处理
#X_NOPARSE_FLAG = 0
# 每个页面样式单独处理，不再根据合并策略生成core文件
# 打开此开关将忽略CORE_LIST_CS中的文件列表配置
#X_NOCORE_STYLE = true
# 每个页面脚本单独处理，不再根据合并策略生成core文件
# 打开此开关将忽略CORE_LIST_JS中的文件列表配置
#X_NOCORE_SCRIPT = true
# 打包结束后不清除临时文件，测试用开关
#X_NOT_CLEAR_TEMP = true
# 发布后使用绝对路径调整外链地址，主要处理页面中同时符合以下条件的外链地址
# - 地址指向的内容为DIR_SOURCE配置下的内容
# - html中使用src="[LINK]"或者href="[LINK]"形式引入的地址
#X_AUTO_EXLINK_PATH = true
# 如果X_AUTO_EXLINK_PATH配置为true则可以通过此配置增加前缀标识来强行替换带该标识的路径，
# 带标识路径规则为[X_AUTO_EXLINK_PREFIX]="[LINK]"，多个前缀标识用|分隔，
# 注：存在单页面多模块调度的系统这里切勿配置data-src
#X_AUTO_EXLINK_PREFIX = data-href|data-html-root
# 使用@MODULE标记的内容在打包后插入内容时可用以下参数指定的标签包装起来，其中%s为要插入的MODULE内容
#X_MODULE_WRAPPER = <#noparse>%s</#noparse>
# 发布模式，可以使用以下三种模式，主要用于控制IGNORE标记的处理
# test        测试模式
# online      线上模式，默认模式
# develop     开发模式
#X_RELEASE_MODE = online

